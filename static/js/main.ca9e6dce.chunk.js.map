{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","initFilter","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","selected","length","className","map","id","completed","title","onClick","currentTodoActions","onSelectButtonClick","classNames","TodoFilter","useState","statusSelected","setStatusSelected","search","setSearch","useEffect","filterActions","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","isLoaded","setIsLoaded","userId","data","href","email","name","App","filteredTodos","setFilteredTodos","filterTitle","filterStatus","selectedTodo","sortTitleLower","toLowerCase","titleLower","includes","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca9e6dce.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = { type: 'filterQuery/SET', payload: string };\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filterQuery/SET',\n  payload: value,\n});\n\ntype SetStatusAction = { type: 'filterStatus/SET', payload: string };\n\nconst setStatus = (value: string): SetStatusAction => ({\n  type: 'filterStatus/SET',\n  payload: value,\n});\n\ntype Action = SetQueryAction | SetStatusAction;\n\nexport const actions = { setQuery, setStatus };\n\nconst initFilter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = initFilter, action: Action) => {\n  switch (action.type) {\n    case 'filterQuery/SET':\n      return { ...state, query: action.payload };\n    case 'filterStatus/SET':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET', payload: Todo[] };\n\ntype Actions = SetTodos;\n\nconst set = (todos: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { set };\n\nconst todosReducer = (todos: Todo[] = [], action: Actions): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET': return [...todos, ...action.payload];\n    default: return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\n\ninterface Props {\n  todos: Todo[] | null,\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  const selected = useAppSelector(state => state.currentTodo);\n\n  const onSelectButtonClick = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!todos?.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos?.map(todo => (\n            <tr key={`${todo.title}-${todo.id}`} data-cy=\"todo\">\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed ? 'has-text-success' : 'has-text-danger'}>{todo.title}</p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectButtonClick(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', selected?.id === todo.id ? 'fa-eye-slash' : 'fa-eye')} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [statusSelected, setStatusSelected] = useState('all');\n  const [search, setSearch] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(filterActions.setQuery(search));\n  }, [search]);\n\n  useEffect(() => {\n    dispatch(filterActions.setStatus(statusSelected));\n  }, [statusSelected]);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={statusSelected}\n            onChange={event => setStatusSelected(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={search}\n          onChange={event => setSearch(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {search && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearch('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const onCloseButtonClick = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    setIsLoaded(false);\n    getUser(todo.userId).then(data => {\n      setUser(data);\n      setIsLoaded(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoaded ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseButtonClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { actions as todosAction } from './features/todos';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[] | null>(null);\n\n  const dispatch = useDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const { query: filterTitle, status: filterStatus } = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setFilteredTodos(\n      todos.filter(todo => {\n        const sortTitleLower = filterTitle.toLowerCase();\n        const titleLower = todo.title.toLowerCase();\n\n        const title = filterTitle ? titleLower.includes(sortTitleLower) : true;\n\n        switch (filterStatus) {\n          case 'completed':\n            return title && todo.completed;\n          case 'active':\n            return title && !todo.completed;\n          default:\n            return title;\n        }\n      }),\n    );\n  }, [todos, filterTitle, filterStatus]);\n\n  useEffect(() => {\n    setIsLoaded(false);\n    getTodos().then(data => {\n      dispatch(todosAction.set(data));\n      setIsLoaded(true);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded ? (\n                <TodoList todos={filteredTodos} />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}